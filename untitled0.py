# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ry4ziPTcQFwhjIn3qXgVDXIMozw-Svjs

# ***Sales Analysis***

# **1. How do you read this dataset using Pandas?**
"""

#import pandas as pd
#df = pd.read_csv("Sales.csv")
#print(df)

"""# New Section

# **2. Show the first 5 rows of the dataset.**
"""

#df.head()

"""# **3. Display the column names and data types.**"""

#df.columns

#df.dtypes

"""# ***Basic Statistics and Information***"""

#df.describe()

"""# **4. What is the total number of rows and columns?**"""

#len(df.columns)

#len(df)

#df.info()

#df.shape

"""# **5. How many unique products were sold?**"""

#df['Product'].unique()

"""# **6. What are the different types of Purchase Type?**"""

#df['Purchase Type'].unique()

"""# **7. Count the number of unique cities in the dataset.**"""

#df['City'].nunique()

"""#* Data Filtering*

# **8. How do you filter the rows where City is "Mumbai"?**
"""

#df[df['City'] == 'Mumbai']

"""
# **9.Display all rows where Payment Method is "Cash" and Price is greater than 500.**"""

#df[(df['Payment Method'] == 'Cash') & (df['Price'] > 500)]

"""# Sorting

# **10. Sort the dataset by Price in descending order.**
"""

#sorted_by_price = df.sort_values(by='price', ascending=False)
#sorted_by_price

"""# **11. Sort by Date and then by City.**"""

#sorted_by_date_city = df.sort_values(by=['Date', 'City'])
#sorted_by_date_city

"""# ***Intermediate Level Questions GroupBy and Aggregation***

# **1. What is the average price of products sold in each city?**
"""

# Total quantity sold for each product
df.groupby('Product')['Quantity'].sum()

# Average price of products sold in each city
df.groupby('City')['Price'].mean()

# Total sales (Price * Quantity) per Manager
df['Total_Sale'] = df['Price'] * df['Quantity']
df.groupby('Manager')['Total_Sale'].sum()

"""# 2.Find the total sales (Price * Quantity) per Manager.

# ***New Columns and Transformation***

# 3. Create a new column called Total Sale which is Price * Quantity.

# **4. Extract the month from the Date column and create a new column called Month.**

# **Value Counts and Unique**

# 5. Find the most common payment method.

# 6. How many times was each product sold?

# **Boolean Indexing**

# 7. Find all orders made with a Quantity greater than 5 and a Purchase Type of "Online"

# ***Airlines Flights Data Analysis***
"""

import pandas as pd
df = pd.read_csv("airlines_flights_data.csv")
print(df)

"""# **1. How many unique airlines are in the dataset?**"""

unique_airlines = df['airline'].nunique()
print(f"Number of unique airlines: {unique_airlines}")

"""# **2.  Which source city has the most flights?**"""

busiest_source = df['source_city'].value_counts().idxmax()
print(f"Busiest source city: {busiest_source}")

"""# **3. Filter all flights that depart in the evening.**"""

evening_flights = df[df['departure_time'] == 'Evening']
print(evening_flights.head())

"""# **4. What is the average price of flights with non stop travel? **"""

non_stop_avg_price = df[df['stops'] == 'zero']['price'].mean()
print(f"Average price of non-stop flights: â‚¹{non_stop_avg_price:.2f}")

"""# **5. Add a new column for price per hour of flight.**"""

df['Price per Hour'] = df['price'] / df['duration']
print(df[['price', 'duration', 'Price per Hour']].head())

"""# **6. Group average price by class (Economy vs Business)**"""

avg_price_by_class = df.groupby('class')['price'].mean()
print(avg_price_by_class)

"""# **7. Sort flights by days left in ascending order.**"""

sorted_by_days_left = df.sort_values(by='days_left')
print(sorted_by_days_left[['airline', 'days_left', 'price']].head())

"""#  8. Count how many flights go to each destination city."""

destination_counts = df['destination_city'].value_counts()
print(destination_counts)

"""# **9. Find the cheapest flight from Mumbai to Delhi.**"""

cheapest_mum_del = df[
    (df['source_city'] == 'Mumbai') &
    (df['destination_city'] == 'Delhi')
].sort_values(by='price').head(1)

print(cheapest_mum_del)

"""# **10. Check if any flight has a missing value.**"""

missing_values = df.isnull().sum()
print("Missing values per column:")
print(missing_values)